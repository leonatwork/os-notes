{"version":3,"sources":["components/header.jsx","components/index.jsx","components/notes.jsx","data/notes-object.js","components/content.jsx","components/main.jsx","index.js"],"names":["Header","state","navExpanded","navbarStyle","backgroundColor","navbarTextStyle","color","fontSize","fontFamily","this","props","showNav","Navbar","collapseOnSelect","style","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","notes","map","note","activeNoteID","Link","key","onClick","handleClick","cursor","textAlign","title","Component","Index","Notes","Fragment","content","Content","width","margin","paddingTop","borderRight","Main","showResponsiveNav","setState","currentShowNav","window","innerWidth","addEventListener","resize","bind","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"sQA6DeA,E,4MAxDbC,MAAQ,CAAEC,aAAa,G,uDACb,IAAD,OACDC,EAAc,CAClBC,gBAAiB,sBAEbC,EAAkB,CACtBC,MAAO,QACPC,SAAU,OACVC,WAAY,2BAEd,OAAIC,KAAKC,MAAMC,QAEX,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,MAAOX,EAAaY,OAAO,MAClD,kBAACH,EAAA,EAAOI,MAAR,CACEF,MAAOT,EACPY,KAAK,0CAFP,YAMA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACZd,KAAKC,MAAMc,MAAMC,KAAI,SAACC,GACrB,IAAIH,EAAY,kBAGhB,OAFIG,EAAKL,KAAO,EAAKX,MAAMiB,eACzBJ,GAAa,cAEb,kBAACD,EAAA,EAAIM,KAAL,CACEC,IAAKH,EAAKL,GACVJ,KAAM,IAAMS,EAAKL,GACjBE,UAAWA,EACXO,QAAS,kBAAM,EAAKpB,MAAMqB,YAAYL,EAAKL,KAC3CP,MAAO,CAAEkB,OAAQ,UAAWC,UAAW,WAEtCP,EAAKQ,aAUpB,kBAACtB,EAAA,EAAD,CAAQG,OAAO,KAAKD,MAAOX,GACzB,kBAACS,EAAA,EAAOI,MAAR,CACEC,KAAK,yCACLH,MAAOT,GAFT,iB,GA9Ca8B,aCmBNC,EArBD,SAAC,GAA0C,IAAxCZ,EAAuC,EAAvCA,MAAOG,EAAgC,EAAhCA,aAAcI,EAAkB,EAAlBA,YACpC,OACE,wBAAIR,UAAU,+BACXC,EAAMC,KAAI,SAACC,GACV,IAAIH,EAAY,kBAEhB,OADIG,EAAKL,KAAOM,IAAcJ,GAAa,WAEzC,wBACEM,IAAKH,EAAKL,GACVE,UAAWA,EACXO,QAAS,kBAAMC,EAAYL,EAAKL,KAChCP,MAAO,CAAEkB,OAAQ,YAEhBN,EAAKQ,YCTHG,EAJD,SAAC,GAAc,IAAZX,EAAW,EAAXA,KACf,OAAO,kBAAC,IAAMY,SAAP,KAAiBZ,ICDbF,EAAQ,CACnB,CACEH,GAAI,EACJa,MAAO,eACPK,QACE,6BACE,4CACA,6BACA,+CACA,4BACE,oGAGA,iIAIA,0FAEF,kFACA,4BACE,4BACE,0CADF,kDAGA,4BACE,+CADF,kDAIF,oCACA,4BACE,6CACA,2CAEF,8CACA,4BACE,kDACA,iDACA,qDACA,+CACA,kDACA,wDAEF,wCArCF,+CAsCE,4BACE,qHAIA,mHAIA,oEACA,0IAKF,yCACA,4BACE,mHAIA,+DACA,kFACA,2HAIA,uIAIA,kEACA,6LAhBF,gFAwBA,gNAKA,gDACA,4BACE,iDACA,iEACA,4DACA,wEACA,yEACA,6FACiE,IAAK,IADtE,WAEW,IAFX,aAKF,wCA/FF,6DAiGE,6BACA,6BACA,mDAnGF,mBAoGmB,IApGnB,iBAoGsC,IApGtC,uBAoG+D,IApG/D,gDAsGE,6BACA,6BACA,+CAxGF,kFA0GE,6BACA,6BACA,4CACA,4BACE,6FACA,0GAIA,4BACE,6CAEE,4BACE,qDAEE,4BACE,mHAIA,wGAQR,6CAEE,4BACE,+EACA,6EAGJ,8CAEE,4BACE,gGAIA,6IAIA,sGAIA,6FAOR,4CACA,4BACE,8DACA,kIAIA,8DACA,2JAIA,uEACA,4FAEF,6BACA,4DACA,4BACE,4BACE,wDADF,UAGA,4BACE,uDADF,8LAKE,4BACE,mHAIA,iHAIA,4FAGA,gIAON,6BACA,2CACA,4BACE,4BACE,kDACA,4BACE,sHAIA,0GAIA,uCACA,4EACA,oCACA,2CACA,sCACA,8HAMJ,4BACE,uCACA,4BACE,yEACA,oEACA,0FAGA,6FAGA,2DACA,sFACA,8DACA,gHAMJ,4BACE,kDACA,4BACE,2DACA,oIAIA,wEACA,8FAKJ,4BACE,4GAIA,4BACE,kFACA,gJAIA,oDAGJ,4BACE,iDACA,4BACE,8GAIA,8CACA,sDAEE,4BACE,gFACA,2DAGJ,yEAOZ,CACElB,GAAI,EACJa,MAAO,qBACPK,QACE,6BACE,kDACA,6BACA,yCACA,4BACE,qGAIA,2EACA,uFAEF,sCACA,4BACE,yCACA,yCAEF,gDAjBF,iCAkBE,6BACA,gDAnBF,6CAoBE,6BACA,6BACA,wEACA,yCACA,4BACE,4DACA,2CAEF,iIAIA,mDACA,4BACE,iDACA,mDACA,uGApCJ,2FA2CE,6BACA,iDA5CF,qEA8CE,6BACA,mDACA,4BACE,+CACA,0CACA,gDACA,4CACA,8CAEF,2CACA,4BACE,4BACE,+CADF,kDAIA,4BACE,iDADF,4DAIA,4BACE,iDADF,kDAIA,4BACE,8CADF,+DAIA,4BACE,sDADF,6EAIA,4BACE,8CADF,oGAKF,sDACA,iEACA,4BACE,oDACA,qDACA,gDAEF,6BACA,0CACA,4BACE,4BACE,oDACA,4BACE,8CACA,4BACE,8CADF,iFAIA,4BACE,0CADF,yGAIA,4BACE,6CADF,qGAIA,yEACA,8EAGJ,4BACE,kCACA,4BACE,2EACA,6FAGA,sEACA,6FAGA,oKAOJ,4BACE,kDACA,4BACE,kEACA,oDAEE,4BACE,4BACE,oDADF,kHAKA,4BACE,oDADF,+DAMJ,oGAIA,mIAMJ,4BACE,0CACA,4BACE,2EACA,yDACA,8EACA,0EACA,4FAGA,kFACA,6GAIA,8FAGA,oFAGJ,4BACE,0DACA,4BACE,uFACA,wHAIA,iEACA,2KAKA,wOAMA,qDAGJ,4BACE,wDACA,4BACE,iEACA,oGAIA,sGAIA,sJAON,6BACA,iDACA,4BACE,qEACA,4BACE,4BACE,iDADF,uFAIA,4BACE,kDADF,uDAMJ,+CACA,4BACE,4BACE,0DADF,kJAKA,4BACE,yDADF,0DAKF,kEACA,4BACE,qEACA,4HAIA,iFACA,0EAEF,gDACA,4BACE,uGAIA,+EAEE,4BACE,6GAIA,wFAGJ,0HAIA,mFACA,+DAEF,mDAzRF,gJA4RE,4BACE,4BACE,8CADF,gGAIA,4BACE,8CADF,oEAKF,gDAtSF,gFAwSE,6BAxSF,uBA0SE,4BACE,4BACE,+CADF,4FAKA,4BACE,gDADF,kEAKF,6FChlBOC,EA1BC,SAAC,GAA4C,IAA1Cb,EAAyC,EAAzCA,aAAchB,EAA2B,EAA3BA,QAASoB,EAAkB,EAAlBA,YACxC,OACE,yBACER,UAAU,MACVT,MACEH,EACI,CAAE8B,MAAO,OAAQC,OAAQ,SAAUC,WAAY,QAC/C,CAAEF,MAAO,MAAOC,OAAQ,SAAUC,WAAY,UAGlDhC,GACA,yBAAKY,UAAU,QAAQT,MAAO,CAAE8B,YAAa,mBAC3C,kBAAC,EAAD,CACEpB,MAAOA,EACPG,aAAcA,EACdI,YAAaA,KAInB,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAOG,KAAMF,EAAMG,GAAcY,aCoB1BM,E,4MAvCb5C,MAAQ,CAAE6C,mBAAmB,EAAOnB,aAAc,G,EAgBlDI,YAAc,SAACV,GACb,EAAK0B,SAAS,CAAEpB,aAAcN,K,uDAf9B,IAAI2B,EAAiBC,OAAOC,WAAa,IACrCF,IAAmBvC,KAAKR,MAAMU,SAChCF,KAAKsC,SAAS,CAAED,kBAAmBE,M,0CAIrCC,OAAOE,iBAAiB,SAAU1C,KAAK2C,OAAOC,KAAK5C,OACnDA,KAAK2C,W,6CAILH,OAAOK,oBAAoB,SAAU7C,KAAK2C,OAAOC,KAAK5C,S,+BAQtD,OACE,6BACE,kBAAC,EAAD,CACEE,QAASF,KAAKR,MAAM6C,kBACpBtB,MAAOA,EACPG,aAAclB,KAAKR,MAAM0B,aACzBI,YAAatB,KAAKsB,cAEpB,kBAAC,EAAD,CACEpB,QAASF,KAAKR,MAAM6C,kBACpBnB,aAAclB,KAAKR,MAAM0B,aACzBI,YAAatB,KAAKsB,mB,GAjCTI,a,MCCnBoB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.fadd914a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nclass Header extends Component {\n  state = { navExpanded: false };\n  render() {\n    const navbarStyle = {\n      backgroundColor: \"rgb(156, 220, 164)\",\n    };\n    const navbarTextStyle = {\n      color: \"white\",\n      fontSize: \"28px\",\n      fontFamily: \"'Merienda One', cursive\",\n    };\n    if (this.props.showNav) {\n      return (\n        <Navbar collapseOnSelect style={navbarStyle} expand=\"lg\">\n          <Navbar.Brand\n            style={navbarTextStyle}\n            href=\"https://leonatwork.github.io/os-notes/\"\n          >\n            OS Notes\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              {this.props.notes.map((note) => {\n                let className = \"list-group-item\";\n                if (note.id === this.props.activeNoteID)\n                  className += \" active-me\";\n                return (\n                  <Nav.Link\n                    key={note.id}\n                    href={\"#\" + note.id}\n                    className={className}\n                    onClick={() => this.props.handleClick(note.id)}\n                    style={{ cursor: \"pointer\", textAlign: \"center\" }}\n                  >\n                    {note.title}\n                  </Nav.Link>\n                );\n              })}\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      );\n    }\n    return (\n      <Navbar expand=\"lg\" style={navbarStyle}>\n        <Navbar.Brand\n          href=\"https://leonatwork.github.io/os-notes/\"\n          style={navbarTextStyle}\n        >\n          OS Notes\n        </Navbar.Brand>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nconst Index = ({ notes, activeNoteID, handleClick }) => {\n  return (\n    <ul className=\"list-group list-group-flush\">\n      {notes.map((note) => {\n        let className = \"list-group-item\";\n        if (note.id === activeNoteID) className += \" active\";\n        return (\n          <li\n            key={note.id}\n            className={className}\n            onClick={() => handleClick(note.id)}\n            style={{ cursor: \"pointer\" }}\n          >\n            {note.title}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\n\nconst Notes = ({ note }) => {\n  return <React.Fragment>{note}</React.Fragment>;\n};\n\nexport default Notes;\n","import React from \"react\";\n\nexport const notes = [\n  {\n    id: 0,\n    title: \"Introduction\",\n    content: (\n      <div>\n        <h1>Introduction</h1>\n        <hr />\n        <b>Operating System</b>\n        <ul>\n          <li>\n            System software that acts as an interface between user and hardware.\n          </li>\n          <li>\n            OS manages computer hardware (controls and coordinates hardware\n            among various programs and users)\n          </li>\n          <li>Provides environment within which other programs can work</li>\n        </ul>\n        <b>Other than kernel there are two types of softwares:</b>\n        <ul>\n          <li>\n            <b>System SW :</b> associated with OS but not part of the kernel\n          </li>\n          <li>\n            <b>Application SW :</b> includes all programs not associated with OS\n          </li>\n        </ul>\n        <b>Goals</b>\n        <ul>\n          <li>User friendly</li>\n          <li>Efficiency</li>\n        </ul>\n        <b>Functions of OS</b>\n        <ul>\n          <li>Process management</li>\n          <li>Memory management</li>\n          <li>I/O device management</li>\n          <li>File management</li>\n          <li>Network management</li>\n          <li>Security and protection</li>\n        </ul>\n        <b>Booting :</b> starting the computer by loading the kernel\n        <ul>\n          <li>\n            Initial program or bootstrap program runs at boot time. This program\n            should be simple\n          </li>\n          <li>\n            It is stored in ROM or EEPROM and is known as firmware within the\n            computer hardware\n          </li>\n          <li>It initializes all aspects of system</li>\n          <li>\n            Bootstrap must know how to load the OS. For this bootstrap must\n            locate and load the OS kernel into memory\n          </li>\n        </ul>\n        <b>Interrupts</b>\n        <ul>\n          <li>\n            Occurrence of an event is signaled by an interrupt from either\n            hardware or software\n          </li>\n          <li>Modern OSs are interrupt driven</li>\n          <li>HW trigger an interrupt by sending a signal to CPU</li>\n          <li>\n            SW trigger an interrupt by executing a special operation called\n            system call or monitor call\n          </li>\n          <li>\n            Number of interrupts are predefined. A table of pointers to\n            interrupt routine is used to increase speed\n          </li>\n          <li>This table is stored in low memory</li>\n          <li>\n            Table keeps address of ISR for various devices. This array or\n            interrupt vector is indexed by a unique device number. This number\n            is provided with the request\n          </li>\n          Trap is a SW generated interrupt caused by an error/request from the\n          program\n        </ul>\n        <p>\n          CPU is connected to device via device controller. CPU and device\n          controller can execute concurrently competing for memory cycles.\n          Memory controller synchronizes access to memory\n        </p>\n        <b>Storage structure</b>\n        <ul>\n          <li>RAM (Main Memory)</li>\n          <li>Programs execute from Main memory</li>\n          <li>Use load and store operation</li>\n          <li>Load : main memory to internal registers</li>\n          <li>Store : internal registers to main memory</li>\n          <li>\n            Instruction execution cycle (von Neumann Architecture) Fetch -{\">\"}{\" \"}\n            Decode -{\">\"} Execute\n          </li>\n        </ul>\n        <b>Caching :</b> copying information to faster storage system\n        temporarily.\n        <br />\n        <br />\n        <b>Storage hierarchy : </b>\n        register(CMOS) -{\">\"} cache(SRAM) -{\">\"} main memory(DRAM) -{\">\"} disk\n        storage/secondary memory(Magnetic disk)\n        <br />\n        <br />\n        <b>Virtual memory :</b> a technique in which a program larger than size\n        of main memory can be executed\n        <br />\n        <br />\n        <b>I/O structure</b>\n        <ul>\n          <li>Each device controller is incharge of specific kind of device</li>\n          <li>\n            Device controller have buffer storage and set of special purpose\n            registers\n          </li>\n          <ul>\n            <li>\n              I/O interrupts\n              <ul>\n                <li>\n                  Starting IO operations\n                  <ul>\n                    <li>\n                      CPU loads appropriate registers in device controller based\n                      on which dc takes action\n                    </li>\n                    <li>\n                      Once complete the dc lets it known to CPU by triggering an\n                      interrupt\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li>\n              Synchronous IO\n              <ul>\n                <li>Control returned to IO process at IO completion</li>\n                <li>Till then process is moved to waiting phase</li>\n              </ul>\n            </li>\n            <li>\n              Asynchronous IO\n              <ul>\n                <li>\n                  Control returned to IO process without waiting for IO\n                  completion\n                </li>\n                <li>\n                  Device status table is used to keep track of IO devices. Table\n                  entry tells (device's type, address and state)\n                </li>\n                <li>\n                  If other process requests the busy device then it is put in\n                  wait queue\n                </li>\n                <li>\n                  On completion interrupt is triggered and table is updated\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </ul>\n        <b>DMA structure</b>\n        <ul>\n          <li>Used for high speed IO devices</li>\n          <li>\n            Device controller set DMA controller registers to use appropriate\n            source and destination addresses\n          </li>\n          <li>OS finds a buffer for transfer</li>\n          <li>\n            The device controller transfers a block of data directly to/from its\n            own buffer storage to memory without CPU intervention.\n          </li>\n          <li>CPU can perform other tasks during this</li>\n          <li>Once transfer is complete DMA controller interrupts the CPU</li>\n        </ul>\n        <hr />\n        <h4>Computer System Architecture</h4>\n        <ol>\n          <li>\n            <b>Single processor system :</b> 1 CPU\n          </li>\n          <li>\n            <b>Multi processor system :</b> Multiple processors sharing\n            resources like bus, clock, memory, peripherals... Adv is graceful\n            degradation - incase of failure some system available to respond,\n            but some slow down occurs.\n            <ul>\n              <li>\n                Tandem system : 2 identical processors (Primary+Backup) if\n                failure backup activated\n              </li>\n              <li>\n                SMP (Symmetric Multiprocessing system) - each processor runs\n                identical copy of OS\n              </li>\n              <li>\n                Asymmetric MP - each system assigned specific task by master\n              </li>\n              <li>\n                Cluster systems : multiple CPU on different systems coupled\n                together. Adv...high availability\n              </li>\n            </ul>\n          </li>\n        </ol>\n        <hr />\n        <h4>Types of OS</h4>\n        <ol>\n          <li>\n            <b>Batch processing OS</b>\n            <ul>\n              <li>\n                Jobs with similar needs are batched together and executed\n                through processor as a group\n              </li>\n              <li>\n                No memory hierarchy only one memory and os is present it it the\n                whole time\n              </li>\n              <li>One cpu</li>\n              <li>One operator who groups the job into batches</li>\n              <li>Slow</li>\n              <li>Inefficient</li>\n              <li>Oldest</li>\n              <li>\n                Better than previous design as grouping of jobs removed the time\n                needed for loading compiler\n              </li>\n            </ul>\n          </li>\n          <li>\n            <b>Spooling</b>\n            <ul>\n              <li>Simultaneous peripheral operations online</li>\n              <li>Additional disk memory is introduced</li>\n              <li>\n                Peripheral devices interact with disk directly and not cpu\n              </li>\n              <li>\n                Cpu only deals with main memory which in turn deals with disk\n              </li>\n              <li>Cpu utilization is improved</li>\n              <li>Multiple devices can interact with disk simultaneously</li>\n              <li>Interactive processes possible</li>\n              <li>\n                But dis adv is it is uniprogramming ie. cpu waits if process\n                needs for some io\n              </li>\n            </ul>\n          </li>\n          <li>\n            <b>Multiprogramming OS</b>\n            <ul>\n              <li>Goal is max cpu utilization</li>\n              <li>\n                Cpu doesn't wait if process waits for io, it executes another\n                ready process available in main memory\n              </li>\n              <li>Context switch between processes happens</li>\n              <li>\n                More complex management/fragmentation issues/paging required\n              </li>\n            </ul>\n          </li>\n          <li>\n            <b>\n              Multi tasking / time sharing / fair share / multiprogramming with\n              round robin\n            </b>\n            <ul>\n              <li>Multitasking is multiprogramming with time sharing</li>\n              <li>\n                Only one cpu, context switch between processes happen so fast\n                that it appears as if it is running simultaneously\n              </li>\n              <li>High response time</li>\n            </ul>\n          </li>\n          <li>\n            <b>Multiprocessing OS</b>\n            <ul>\n              <li>\n                2 or more CPUs in a single system, sharing memory, io devices\n                and system buses\n              </li>\n              <li>Truly parallel</li>\n              <li>\n                2 kinds of architecture\n                <ul>\n                  <li>Symmetric : all CPU same, managed by a single OS</li>\n                  <li>Asymmetric : master slave</li>\n                </ul>\n              </li>\n              <li>Increased throughput and reliability</li>\n            </ul>\n          </li>\n        </ol>\n      </div>\n    ),\n  },\n  {\n    id: 1,\n    title: \"Process Scheduling\",\n    content: (\n      <div>\n        <h1>Process Scheduling</h1>\n        <hr />\n        <b>Scheduling</b>\n        <ul>\n          <li>\n            Task of selecting a process from ready queue and allocating it to\n            CPU\n          </li>\n          <li>Records in the queue are generally the PCBs</li>\n          <li>CPU is allocated to the selected process by dispatcher</li>\n        </ul>\n        <b>Process</b>\n        <ul>\n          <li>CPU bound</li>\n          <li>IO bound</li>\n        </ul>\n        <b>Job scheduling : </b>which job to bring into memory\n        <br />\n        <b>CPU scheduling : </b>which job to run if several jobs are ready\n        <br />\n        <br />\n        <p>Process execution = CPU burst + I/O burst</p>\n        <b>Scheduling</b>\n        <ul>\n          <li>Non preemptive / cooperative</li>\n          <li>Preemptive</li>\n        </ul>\n        <p>\n          Dispatcher is the module that gives of the CPU to the process selected\n          by the short-term scheduler\n        </p>\n        <b>Dispatcher functions</b>\n        <ul>\n          <li>Switching context</li>\n          <li>Switching user mode</li>\n          <li>\n            Jumping to proper location in the user program to restart that\n            program\n          </li>\n        </ul>\n        Dispatcher should be extremely fast because it called every time a\n        context switch occurs\n        <br />\n        <b>Dispatch latency :</b> time it take for dispatcher to stop one\n        process and start another\n        <hr />\n        <h4>Scheduling criteria</h4>\n        <ul>\n          <li>CPU utilization</li>\n          <li>Throughput</li>\n          <li>Turn around time</li>\n          <li>Waiting time</li>\n          <li>Response time</li>\n        </ul>\n        <b>Measurements</b>\n        <ul>\n          <li>\n            <b>Burst time (BT):</b> time the process requires for running on\n            CPU.\n          </li>\n          <li>\n            <b>Waiting time (WT):</b> time spent by a process in ready state\n            waiting for CPU.\n          </li>\n          <li>\n            <b>Arrival time (AT):</b> time at which process arrives in ready\n            state.\n          </li>\n          <li>\n            <b>Exit time (ET):</b> when process completed its execution and\n            exits the system.\n          </li>\n          <li>\n            <b>Turn around time (TAT):</b> total time taken by a process in CPU\n            (process submission to completion).\n          </li>\n          <li>\n            <b>Response time :</b> time between a process enters the ready queue\n            and get scheduled on the CPU for the first time.\n          </li>\n        </ul>\n        <p>TAT = ET - AT = WT + BT</p>\n        <b>CPU scheduling evaluation criteria</b>\n        <ul>\n          <li>Average waiting time</li>\n          <li>Average response time</li>\n          <li>CPU utilization</li>\n        </ul>\n        <hr />\n        <h4>Algorithms</h4>\n        <ol>\n          <li>\n            <b>FCFS (non-preemptive)</b>\n            <ul>\n              <li>Low throughput</li>\n              <li>\n                <b>Convoy effect :</b> smaller process have to wait for long\n                time for bigger process to release CPU\n              </li>\n              <li>\n                <b>Advantage :</b> simple and easy to use/understand. must be\n                used for background process where execution is not urgent\n              </li>\n              <li>\n                <b>Disadvantage :</b> convoy effect, normally higher average\n                waiting time, no consideration of priority or burst time.\n              </li>\n              <li>Should not be used for interactive system</li>\n              <li>No starvation here, as processor is unbiased</li>\n            </ul>\n          </li>\n          <li>\n            <b>SJF</b>\n            <ul>\n              <li>Both preemptive SRTF and non-preemptive SJF</li>\n              <li>\n                SRTF is optimal as it guarantees minimum average waiting time\n              </li>\n              <li>Better average response time than FCFS</li>\n              <li>\n                Cannot be implemented as we dont know burst time of a process\n              </li>\n              <li>\n                Starvation of larger burst time process and higher response time\n                (Highest response ratio next - modification of SJF to solve\n                this)\n              </li>\n            </ul>\n          </li>\n          <li>\n            <b>Priority Scheduling</b>\n            <ul>\n              <li>Both preemptive and non-preemptive</li>\n              <li>\n                How priority defined:\n                <ul>\n                  <li>\n                    <b>Internally defined : </b>\n                    use some measurable quantity to compute the priority. Eg.\n                    time limits, memory requirements, no. of open files.\n                  </li>\n                  <li>\n                    <b>Externally defined : </b>set by criteria that are\n                    external to the OS. Eg. by user.\n                  </li>\n                </ul>\n              </li>\n              <li>\n                Problem of starvation : low priority process never get access of\n                CPU\n              </li>\n              <li>\n                Solution: Aging - increasing the priority of the process that\n                waits in the system for longer time\n              </li>\n            </ul>\n          </li>\n          <li>\n            <b>Round Robin</b>\n            <ul>\n              <li>Designed specially for time sharing systems</li>\n              <li>Like FCFS with preemption</li>\n              <li>Time quantum/time slice (generally 10 - 100ms)</li>\n              <li>Ready queue is treated as a circular queue</li>\n              <li>\n                In RR we need to keep in mind the time for context switching\n              </li>\n              <li>If time quantum is large then it will be like FCFS</li>\n              <li>\n                If time quantum is very small (compared to context switch time)\n                then overhead\n              </li>\n              <li>\n                Time quantum must be large with respect to context switch time\n              </li>\n              <li>Has higher TAT compared to SJF but better response</li>\n            </ul>\n          </li>\n          <li>\n            <b>Multilevel Queue Scheduling</b>\n            <ul>\n              <li>Ready queue is partitioned into several separate queues</li>\n              <li>\n                Processes are permanently assigned to one queue based on size,\n                priority or process type.\n              </li>\n              <li>Each queue has its own scheduling</li>\n              <li>\n                There must be scheduling among queues also i.e each queue gets a\n                certain amount of CPU time and within that time it executes its\n                processes.\n              </li>\n              <li>\n                Scheduling between queues are mostly implemented as fixed\n                priority preemptive scheduling (in fixed priority scheduling it\n                will first cater to the foreground process and then serve\n                background process).\n              </li>\n              <li>Starvation possible</li>\n            </ul>\n          </li>\n          <li>\n            <b>Multilevel Feedback Queue</b>\n            <ul>\n              <li>Processes may move between queues</li>\n              <li>\n                Processes with different CPU-burst characteristics are now\n                seperated\n              </li>\n              <li>\n                If process uses too much CPU time it is pushed to lower priority\n                queue\n              </li>\n              <li>\n                If process waits too long in lower priority queue, it is moved\n                to higher priority queue (aging prevents starvation)\n              </li>\n            </ul>\n          </li>\n        </ol>\n        <hr />\n        <h4>Thread Scheduling</h4>\n        <ul>\n          <li>OS schedules the kernel level threads</li>\n          <ul>\n            <li>\n              <b>Local scheduling :</b> thread library decides which thread to\n              put onto an available light weight process.\n            </li>\n            <li>\n              <b>Global scheduling :</b> kernel decides which kernel thread to\n              run exist.\n            </li>\n          </ul>\n        </ul>\n        <b>Contention scope</b>\n        <ol>\n          <li>\n            <b>Process contention scope : </b>On systems with many to many or\n            many to one models, the thread library schedules user level threads\n            to run on available light weight processes\n          </li>\n          <li>\n            <b>System contention scope : </b>Process of deciding which kernel\n            thread to run on CPU\n          </li>\n        </ol>\n        <b>Multiple processor scheduling (MPS)</b>\n        <ul>\n          <li>Multiple CPUs available, more complex</li>\n          <li>\n            Homogeneous processor : each process maintains its own private queue\n            of processes or threads\n          </li>\n          <li>Load balancing to improve performance may be done</li>\n          <li>Asymmetric multiprocessing (master-slave)</li>\n        </ul>\n        <b>Approaches to MPS</b>\n        <ul>\n          <li>\n            We assume processors are homogeneous and have UMA-uniform memory\n            access\n          </li>\n          <li>\n            Load sharing can occur with a common ready queue\n            <ul>\n              <li>\n                Each processor is self scheduling and selects a process from the\n                common queue\n              </li>\n              <li>One processor is appointed as scheduler (master-slave)</li>\n            </ul>\n          </li>\n          <li>\n            Asymmetric multiprocessing is easier than SMP because only one\n            machine can access the data\n          </li>\n          <li>But bottleneck may happen as only one is scheduling</li>\n          <li>Nowaday symmetric is more used</li>\n        </ul>\n        <b>Processor affinity :</b> migration of a process to another processor\n        is avoided because of the cost of invalidating the process and\n        repopulating the processor cache.\n        <ul>\n          <li>\n            <b>Soft affinity :</b> here OS tries to keep a process on one\n            processor, but cannot guarantee that it will happen.\n          </li>\n          <li>\n            <b>Hard affinity :</b> when OS can make a process not to migrate to\n            other processors.\n          </li>\n        </ul>\n        <b>Load balancing : </b>attempts to keep load evenly distributed across\n        all processors in SMP system.\n        <br />\n        Migration approaches\n        <ul>\n          <li>\n            <b>Push migration :</b>\n            load on each processors are checked and then distributed evenly in\n            case of any imbalance\n          </li>\n          <li>\n            <b>Pull migration : </b> an idle processor pulls a waiting task from\n            a busy processor\n          </li>\n        </ul>\n        <p>Multicore processors have very complicated scheduling issue</p>\n      </div>\n    ),\n  },\n];\n","import React from \"react\";\nimport Index from \"./index\";\nimport Notes from \"./notes\";\nimport { notes } from \"../data/notes-object\";\n\nconst Content = ({ activeNoteID, showNav, handleClick }) => {\n  return (\n    <div\n      className=\"row\"\n      style={\n        showNav\n          ? { width: \"100%\", margin: \"0 auto\", paddingTop: \"15px\" }\n          : { width: \"80%\", margin: \"0 auto\", paddingTop: \"15px\" }\n      }\n    >\n      {!showNav && (\n        <div className=\"col-3\" style={{ borderRight: \"1px solid #eee\" }}>\n          <Index\n            notes={notes}\n            activeNoteID={activeNoteID}\n            handleClick={handleClick}\n          />\n        </div>\n      )}\n      <div className=\"col\">\n        <Notes note={notes[activeNoteID].content} />\n      </div>\n    </div>\n  );\n};\n\nexport default Content;\n","import React, { Component } from \"react\";\nimport Header from \"./header\";\nimport Content from \"./content\";\nimport { notes } from \"../data/notes-object\";\n\nclass Main extends Component {\n  state = { showResponsiveNav: false, activeNoteID: 0 };\n  resize() {\n    let currentShowNav = window.innerWidth < 950;\n    if (currentShowNav !== this.state.showNav) {\n      this.setState({ showResponsiveNav: currentShowNav });\n    }\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  handleClick = (id) => {\n    this.setState({ activeNoteID: id });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header\n          showNav={this.state.showResponsiveNav}\n          notes={notes}\n          activeNoteID={this.state.activeNoteID}\n          handleClick={this.handleClick}\n        />\n        <Content\n          showNav={this.state.showResponsiveNav}\n          activeNoteID={this.state.activeNoteID}\n          handleClick={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Main from \"./components/main\";\nimport \"./style.css\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n"],"sourceRoot":""}